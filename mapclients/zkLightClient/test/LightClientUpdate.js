const { ethers } = require("hardhat");
const proofs = require("./data");
const { expect } = require("chai");
const axios = require("axios");
require("solidity-coverage");

async function getValidatorsInfo(epoch) {
    let requestData = {
        method: "istanbul_getEpochInfo",
        params: [epoch],
        id: 1,
    };

    let epochInfoData = await axios.post("https://rpc.maplabs.io/", requestData);
    let EpochInfo = epochInfoData.data.result;
    //console.log(EpochInfo)

    let weights = [];
    for (let i = 0; i < EpochInfo.validators.length; i++) {
        let addLenght =
            "0x000000000000000000000000000000000000000000000000000000000000000" + EpochInfo.validators[i].weight;

        weights.push(addLenght);
    }

    let blockNumber = "0x" + (Number(EpochInfo.epoch) * Number(EpochInfo.epoch_size)).toString(16);

    let getValidatorsBLSPublicKeys = {
        method: "istanbul_getValidatorsBLSPublicKeys",
        params: [blockNumber],
        id: 1,
    };

    let blsData = await axios.post("https://rpc.maplabs.io/", getValidatorsBLSPublicKeys);

    let G2Hex = blsData.data.result;

    let maxValidatorsLength = 32 * 5 * 128;
    let initValidatorsInfo = "0x" + G2Hex.map((item, index) => item.slice(2) + weights[index].slice(2)).join("");
    let padLength = maxValidatorsLength - G2Hex.length * 32 * 5;

    initValidatorsInfo = initValidatorsInfo + "00".repeat(padLength);

    return initValidatorsInfo;
}

describe("LightNode start test", function () {
    const maxValidatorsLength = 32 * 5 * 128;
    const epoch = 77;
    let addr1;

    let LightClient;
    let lightClient;
    let lightNodeContract;
    let lightNodeContractAddress;

    let VerifyToolClient;
    let verifyToolClient;
    let verifyToolContract;
    let verifyToolContractAddress;

    let zkVerifierAddress;

    let LightProxyClient;
    let lightProxyClient;
    let proxy;

    let mockVerify;

    let blsCode;
    let bc;

    let initValidatorsInfo;

    let datInit;

    beforeEach(async function () {
        [owner, addr1] = await ethers.getSigners();
        VerifyToolClient = await ethers.getContractFactory("VerifyTool");
        verifyToolClient = await VerifyToolClient.deploy();
        verifyToolContract = await verifyToolClient.deployed();
        verifyToolContractAddress = verifyToolContract.address;

        let MockVerifyToolClient = await ethers.getContractFactory("MockVerifyTool");
        mockVerify = await MockVerifyToolClient.deploy();

        //deploy zkVerifier
        let zkvf = await ethers.getContractFactory("Verifier");
        zkvf = await zkvf.deploy();
        zkvc = await zkvf.deployed();
        zkVerifierAddress = zkvc.address;
    });

    it("deploy LightNode", async function () {
        LightClient = await ethers.getContractFactory("LightNode");
        lightClient = await LightClient.deploy();
        lightNodeContract = await lightClient.deployed();
        lightNodeContractAddress = lightNodeContract.address;
    });

    it("initialize ", async function () {
        let requestData = {
            method: "istanbul_getEpochInfo",
            params: [epoch],
            id: 1,
        };

        let epochInfoData = await axios.post("https://rpc.maplabs.io/", requestData);
        let EpochInfo = epochInfoData.data.result;
        //console.log(EpochInfo)

        let weights = [];
        for (let i = 0; i < EpochInfo.validators.length; i++) {
            let addLenght =
                "0x000000000000000000000000000000000000000000000000000000000000000" + EpochInfo.validators[i].weight;

            weights.push(addLenght);
        }

        let blockNumber = "0x" + (Number(EpochInfo.epoch) * Number(EpochInfo.epoch_size)).toString(16);

        let getValidatorsBLSPublicKeys = {
            method: "istanbul_getValidatorsBLSPublicKeys",
            params: [blockNumber],
            id: 1,
        };

        let blsData = await axios.post("https://rpc.maplabs.io/", getValidatorsBLSPublicKeys);

        let G2Hex = blsData.data.result;
        let vCount = G2Hex.length;

        let initValidatorsInfo = "0x" + G2Hex.map((item, index) => item.slice(2) + weights[index].slice(2)).join("");
        let padLength = maxValidatorsLength - G2Hex.length * 32 * 5;

        initValidatorsInfo = initValidatorsInfo + "00".repeat(padLength);

        datInit = lightClient.interface.encodeFunctionData("initialize", [
            initValidatorsInfo,
            vCount,
            epoch,
            EpochInfo.epoch_size,
            verifyToolContractAddress,
            zkVerifierAddress,
        ]);

        LightProxyClient = await ethers.getContractFactory("LightNodeProxy");
        lightProxyClient = await LightProxyClient.deploy(lightNodeContractAddress, datInit);
        await lightProxyClient.deployed();

        proxy = LightClient.attach(lightProxyClient.address);
    });

    it("updateBlockHeader height 3850000", async function () {
        let verifyProof =
            "0x000000000000000000000000000000000000000000000000000000000000012001dea23fbacc938febec1abc2fc01698cbe7209903d92c4c59d3a08d1cd6f38825f55b22f2919e65efa81eecdb733612f5a2bd64b8103a291e46f844aa2ac0432e0cac720777b1b5e8571dcc39c96f456982b3aa7e162007da71d78791d30aaf08783156938a61766b339150a639dd153638698eb1b40d804dc8bca0798b3e2d276cddef455604a81f194abc96d5fbc3b9bbf6f7a91f106aa44c0781c835f5fc21245c652eb37923a3d06576b96f0c60a74608395b47d80a234296a77c571d1421603d18cfb3464166838edafc965f07e78bdfaa1011219d287364c48a61d08a2389c8885982ec0a2f4212f29413ca2dcc9e7a88e31dbe677c5bffc143d0fd6e000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000006a01395e5469f6d1080c4055b6bb09d082ba38ef35d4f35f47fc92aa3c520d310e92efe09fd8dc8d72745cf5c56951c37d23c123c14c080025db40e22a30401c6c52abb06d0fafa4fd59b25615698cd06e3b8b97d618b181d76873f5105a7d621ba274e9a65188bdc33669aa8cfbf082264272141f8fef260cbe4b4e641f4d6495300000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000c4000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000dbbd0434bf5a280b19efb4d4d740da1e4af5e9ee00000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000003abf650000000000000000000000000000000000000000000000000000000000c65d4000000000000000000000000000000000000000000000000000000000000074370000000000000000000000000000000000000000000000000000000063e27a0f00000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000174876e80000000000000000000000000000000000000000000000000000000000000000205e36ce867e56b2ebc8e5f510aea36dda0c6e0dbfccee412cb9522665d73813bb000000000000000000000000000000000000000000000000000000000000002044bc7dad9daf9f267b51c18f5c988472f6d58040867303266db5ff021be4facf0000000000000000000000000000000000000000000000000000000000000020e58a2f40e1152464dcad179795ff5ba9d6ea92ecb3217bc8caad607348aa33630000000000000000000000000000000000000000000000000000000000000020bb914736c549636b6d2ef7305d29d0f50bc60fc6ce1d555c3bb4dffc86c66de700000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000008000000000000000000000000000000000000000010000000000000000000000000400000100000000000000000000000000000000000000200000800000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000080000000000000000000000000000000000004000000000000000000000001000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fdd883010100846765746888676f312e31392e35856c696e757800000000000000f8dbc0c0c080b8410642b58b46f0aaf684fb4560b876547d7a184a62167a904897c03ab07a74c7c457955ec0e6ce6c29e8521b7eb38ce5ba2d48cffdeec7b1daeb5cc0ade66ec19e00f84884134f7f4fb8400a58be72d00fe4bf3c4e1239dd9ed1e7589ebbbc9a3c302bfda8264afa6c93e02910f06c34a09bb617ddef68db98356fee9c02c2212508d1580c30167a2ab78a80f848841f896bbfb84016a4a83174c9ff192e8e5b4da992aeebca49706d96b6f1191f98c5f4e69cc11311053caae7c04ac7962af843c2d53f14936af0c61d78be0edba7ce98a80a28eb80000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000410642b58b46f0aaf684fb4560b876547d7a184a62167a904897c03ab07a74c7c457955ec0e6ce6c29e8521b7eb38ce5ba2d48cffdeec7b1daeb5cc0ade66ec19e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000134f7f4f0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400a58be72d00fe4bf3c4e1239dd9ed1e7589ebbbc9a3c302bfda8264afa6c93e02910f06c34a09bb617ddef68db98356fee9c02c2212508d1580c30167a2ab78a000000000000000000000000000000000000000000000000000000001f896bbf00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004016a4a83174c9ff192e8e5b4da992aeebca49706d96b6f1191f98c5f4e69cc11311053caae7c04ac7962af843c2d53f14936af0c61d78be0edba7ce98a80a28eb0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a9f901a601827437b9010000000000000000000000000000000000080000000000000000000000000000000000000000100000000000000000000000004000001000000000000000000000000000000000000002000008000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000800000000000000000000000000000000000040000000000000000000000010000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89df89b9413cb04d4a5dfb6398fc5ab005a6c84337256ee23f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000054628e4012546bc98842f47c5e8bf27f627be892a0000000000000000000000000d27771310a28029da5f0a3ff304303da5c90dc78a0000000000000000000000000000000000000000000000011fd4c2eb5826880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000208000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001b3f901b0822080b901aa02f901a601827437bf89df89b9413cb04d4a5dfb6398fc5ab005a6c84337256ee23f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa000000000000000000000000054628e4012546bc98842f47c5e8bf27f627be892a0000000000000000000000000d27771310a28029da5f0a3ff304303da5c90dc78a0000000000000000000000000000000000000000000000011fd4c2eb58268800000000000000000000000000000";

        let verifyData = await proxy.verifyProofData(verifyProof);

        expect(verifyData.success).to.be.equal(false);

        expect(await proxy.headerHeight()).to.be.equal("3800000");

        let data38500000 = await axios.get("http://47.242.33.167:8181/proof?chain_id=22776&height=3850000");
        //console.log(data38500000.data.data.result.proof)
        let proof3850000 = [
            data38500000.data.data.result.proof.pi_a[0],
            data38500000.data.data.result.proof.pi_a[1],
            data38500000.data.data.result.proof.pi_b[0][0],
            data38500000.data.data.result.proof.pi_b[0][1],
            data38500000.data.data.result.proof.pi_b[1][0],
            data38500000.data.data.result.proof.pi_b[1][1],
            data38500000.data.data.result.proof.pi_c[0],
            data38500000.data.data.result.proof.pi_c[1],
        ];
        //console.log(proof3850000);

        let startHeight = "0x" + Number(3850000).toString(16);
        //console.log(startHeight)
        let questData3850000 = {
            id: "1",
            jsonrpc: "2.0",
            method: "eth_getBlockByNumber",
            params: [startHeight, true],
        };
        let block3850000 = await axios.post("https://rpc.maplabs.io/", questData3850000);
        let blcokResult3850000 = block3850000.data.result;

        let header3850000 = [
            blcokResult3850000.parentHash,
            blcokResult3850000.miner,
            blcokResult3850000.stateRoot,
            blcokResult3850000.transactionsRoot,
            blcokResult3850000.receiptsRoot,
            blcokResult3850000.logsBloom,
            eval(blcokResult3850000.number).toString(),
            eval(blcokResult3850000.gasLimit).toString(),
            eval(blcokResult3850000.gasUsed).toString(),
            eval(blcokResult3850000.timestamp).toString(),
            blcokResult3850000.extraData,
            blcokResult3850000.mixHash,
            blcokResult3850000.nonce,
            eval(blcokResult3850000.baseFeePerGas).toString(),
        ];

        //console.log(header3850000)

        let ist3850000 = await mockVerify.decodeExtraData(blcokResult3850000.extraData);
        //console.log(ist3850000)

        let validatorsInfo = await getValidatorsInfo(77);

        await proxy.updateBlockHeader(validatorsInfo, header3850000, ist3850000, proof3850000);

        expect(await proxy.headerHeight()).to.be.equal("3850000");

        verifyData = await proxy.verifyProofData(verifyProof);

        expect(verifyData.success).to.be.equal(true);
    });

    it("updateBlockHeader height 3900000", async function () {
        expect(await proxy.headerHeight()).to.be.equal("3850000");

        let data39000000 = await axios.get("http://47.242.33.167:8181/proof?chain_id=22776&height=3900000");
        //console.log(data38500000.data.data.result.proof)
        let proof3900000 = [
            data39000000.data.data.result.proof.pi_a[0],
            data39000000.data.data.result.proof.pi_a[1],
            data39000000.data.data.result.proof.pi_b[0][0],
            data39000000.data.data.result.proof.pi_b[0][1],
            data39000000.data.data.result.proof.pi_b[1][0],
            data39000000.data.data.result.proof.pi_b[1][1],
            data39000000.data.data.result.proof.pi_c[0],
            data39000000.data.data.result.proof.pi_c[1],
        ];
        //console.log(proof3850000);

        let startHeight = "0x" + Number(3900000).toString(16);
        //console.log(startHeight)
        let questData3900000 = {
            id: "1",
            jsonrpc: "2.0",
            method: "eth_getBlockByNumber",
            params: [startHeight, true],
        };
        let block3900000 = await axios.post("https://rpc.maplabs.io/", questData3900000);
        let blcokResult3900000 = block3900000.data.result;

        let header3900000 = [
            blcokResult3900000.parentHash,
            blcokResult3900000.miner,
            blcokResult3900000.stateRoot,
            blcokResult3900000.transactionsRoot,
            blcokResult3900000.receiptsRoot,
            blcokResult3900000.logsBloom,
            eval(blcokResult3900000.number).toString(),
            eval(blcokResult3900000.gasLimit).toString(),
            eval(blcokResult3900000.gasUsed).toString(),
            eval(blcokResult3900000.timestamp).toString(),
            blcokResult3900000.extraData,
            blcokResult3900000.mixHash,
            blcokResult3900000.nonce,
            eval(blcokResult3900000.baseFeePerGas).toString(),
        ];

        //console.log(header3900000)

        let ist3900000 = await mockVerify.decodeExtraData(blcokResult3900000.extraData);
        //console.log(ist3900000)

        let validatorsInfo = await getValidatorsInfo(78);

        await proxy.updateBlockHeader(validatorsInfo, header3900000, ist3900000, proof3900000);

        expect(await proxy.headerHeight()).to.be.equal("3900000");

        let verifyProof =
            "0x00000000000000000000000000000000000000000000000000000000000001201b684d9334a7b60d1c89086b820ae392927bea57d22fceb79e2d16eeb42653240320eac96c5583e5903d6ee97c158ab2b658abe70495c92fe8ad19c9e901015f1d7d03d56b9c3e348f45e357d4a3b0d94d575f2fd8a2b973fb99db2abbb531c52d938d72743ed4769c50d69095b61545fed5967d0955fb69a5bd3ae5f0b28f5d1ccb77d11bbce554bf1ef3affaec338047a4ed2395b086047d9050a3fd8ba5a11fd9db197b08af350a2f9c1c5135f53a1c2912969dd6faa551053535974963a71b673bde89b6f28d10c2d4f1b742a6f2ed1440d5c4e057db5993f25eb9c14de824d6c8b958e043814bbf75d957ed1df3bf3ab8d5ed6e5a7a7ff39d98f1fcfa7f000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000006a0056dd3ed72453d69ce3dca5538c277df9ca23616ac2a3c382635aac2b24462a11520dc251f0aca8e6f68090466b3c4a795a0e3914c2f7b30b6be85771d62a84f09302ae63e9a1367e7b7c9eda7ba2eb2764d1bc2f79faa7626622acac10e250e1dd378f4f9420543d203fbb59e0c237380e14a147fd66f5aafafa887dda6aa7a00000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000c2000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000001734524cc07a49a1237b950d72caae98d94676300000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000003b82640000000000000000000000000000000000000000000000000000000000c65d4000000000000000000000000000000000000000000000000000000000001c3da00000000000000000000000000000000000000000000000000000000063e6cf5600000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000174876e800000000000000000000000000000000000000000000000000000000000000002040060b885999a8b97e67b7c7c40717f1e7fe0b03e927e731e3729539e9eb411d0000000000000000000000000000000000000000000000000000000000000020e661189d680366825c6d02d9db78a2077c4aadf9d46c95cb618245a0a420aaf10000000000000000000000000000000000000000000000000000000000000020bc2c65e715cb6231bd53ff2fc7e80143926fc569cdf59d2f7f55d34156825d2d00000000000000000000000000000000000000000000000000000000000000202af1d865ae966aa13e79a1b7d7ca37931df9da686a8e1bcdc5322691ce53d6d400000000000000000000000000000000000000000000000000000000000001008000000000000000040000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000200000000000000040000000000000000000000000000000000000000000000000000000000080000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000080000010000000000000000000000000000000000000000000000000200400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fdd883010100846765746888676f312e31392e34856c696e757800000000000000f8dbc0c0c080b84154d6ec4982b7adc3d721aadcbd5b51132b3a1bb4a14ac950be089c0127e63c840ffe10232e125ad6c71cb875a3ed2bbf6992b11cf4748c52db1f245d726b191a00f848841fc3ffdfb840143ae077c5674244597e8bf4edd3113a67e9a6447761b99b655b11b5ae6fddff0b3c478a3437ca2d475ffaab9b7b159b6ddbb23050daef6250c8d3e8790d396502f848843fc37fbfb84014c6a43087bb59a913464783bf7f0f57d601f8a983892b7f861d04d40fcf8e4602fb16bc0b80550a787b10e487936ae449251ee1a9b021162aad0eb47f215c4503000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004154d6ec4982b7adc3d721aadcbd5b51132b3a1bb4a14ac950be089c0127e63c840ffe10232e125ad6c71cb875a3ed2bbf6992b11cf4748c52db1f245d726b191a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fc3ffdf000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040143ae077c5674244597e8bf4edd3113a67e9a6447761b99b655b11b5ae6fddff0b3c478a3437ca2d475ffaab9b7b159b6ddbb23050daef6250c8d3e8790d3965000000000000000000000000000000000000000000000000000000003fc37fbf00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000004014c6a43087bb59a913464783bf7f0f57d601f8a983892b7f861d04d40fcf8e4602fb16bc0b80550a787b10e487936ae449251ee1a9b021162aad0eb47f215c4500000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018af9018701831c3da0bf87df87b941d621078676d7bdd75fc7f5ebbabaddc9a65e3c5f863a034a75be8a536c66a8f450ebf1377a59caebe86a32a1e3c3f6f3ae1eeff21854ea0000000000000000000000000e0dc8d7f134d0a79019bef9c2fd4b2013a64fcd6a0000000000000000000000000000000000000000000000000000000000255691f800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000194f90191822080b9018b02f9018701831c3da0b9010080000000000000000400000000000000000000000000000000000000000000000040000000000000000000000000000000000000000002000000000000000400000000000000000000000000000000000000000000000000000000000800000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000800000100000000000000000000000000000000000000000000000002004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f87df87b941d621078676d7bdd75fc7f5ebbabaddc9a65e3c5f863a034a75be8a536c66a8f450ebf1377a59caebe86a32a1e3c3f6f3ae1eeff21854ea0000000000000000000000000e0dc8d7f134d0a79019bef9c2fd4b2013a64fcd6a0000000000000000000000000000000000000000000000000000000000255691f80000000000000000000000000";

        let verifyData = await proxy.verifyProofData(verifyProof);

        expect(verifyData.success).to.be.equal(true);
    });

    it("updateBlockHeader height 3950000", async function () {
        console.log(await proxy.maxValidators());
        console.log();
        expect(await proxy.headerHeight()).to.be.equal("3900000");

        let data39500000 = await axios.get("http://47.242.33.167:8181/proof?chain_id=22776&height=3950000");
        //console.log(data38500000.data.data.result.proof)
        let proof3950000 = [
            data39500000.data.data.result.proof.pi_a[0],
            data39500000.data.data.result.proof.pi_a[1],
            data39500000.data.data.result.proof.pi_b[0][0],
            data39500000.data.data.result.proof.pi_b[0][1],
            data39500000.data.data.result.proof.pi_b[1][0],
            data39500000.data.data.result.proof.pi_b[1][1],
            data39500000.data.data.result.proof.pi_c[0],
            data39500000.data.data.result.proof.pi_c[1],
        ];
        //console.log(proof3850000);

        let startHeight = "0x" + Number(3950000).toString(16);
        //console.log(startHeight)
        let questData3950000 = {
            id: "1",
            jsonrpc: "2.0",
            method: "eth_getBlockByNumber",
            params: [startHeight, true],
        };
        let block3950000 = await axios.post("https://rpc.maplabs.io/", questData3950000);
        let blcokResult3950000 = block3950000.data.result;

        let header3950000 = [
            blcokResult3950000.parentHash,
            blcokResult3950000.miner,
            blcokResult3950000.stateRoot,
            blcokResult3950000.transactionsRoot,
            blcokResult3950000.receiptsRoot,
            blcokResult3950000.logsBloom,
            eval(blcokResult3950000.number).toString(),
            eval(blcokResult3950000.gasLimit).toString(),
            eval(blcokResult3950000.gasUsed).toString(),
            eval(blcokResult3950000.timestamp).toString(),
            blcokResult3950000.extraData,
            blcokResult3950000.mixHash,
            blcokResult3950000.nonce,
            eval(blcokResult3950000.baseFeePerGas).toString(),
        ];

        //console.log(header3950000)

        let ist3950000 = await mockVerify.decodeExtraData(blcokResult3950000.extraData);
        //console.log(ist3950000)

        let validatorsInfo = await getValidatorsInfo(79);

        await proxy.updateBlockHeader(validatorsInfo, header3950000, ist3950000, proof3950000);

        expect(await proxy.headerHeight()).to.be.equal("3950000");
    });

    it("updateBlockHeader height 4000000", async function () {
        expect(await proxy.headerHeight()).to.be.equal("3950000");

        let data40000000 = await axios.get("http://47.242.33.167:8181/proof?chain_id=22776&height=4000000");
        //console.log(data38500000.data.data.result.proof)
        let proof4000000 = [
            data40000000.data.data.result.proof.pi_a[0],
            data40000000.data.data.result.proof.pi_a[1],
            data40000000.data.data.result.proof.pi_b[0][0],
            data40000000.data.data.result.proof.pi_b[0][1],
            data40000000.data.data.result.proof.pi_b[1][0],
            data40000000.data.data.result.proof.pi_b[1][1],
            data40000000.data.data.result.proof.pi_c[0],
            data40000000.data.data.result.proof.pi_c[1],
        ];
        //console.log(proof3850000);

        let startHeight = "0x" + Number(4000000).toString(16);
        //console.log(startHeight)
        let questData4000000 = {
            id: "1",
            jsonrpc: "2.0",
            method: "eth_getBlockByNumber",
            params: [startHeight, true],
        };
        let block4000000 = await axios.post("https://rpc.maplabs.io/", questData4000000);
        let blcokResult4000000 = block4000000.data.result;

        let header4000000 = [
            blcokResult4000000.parentHash,
            blcokResult4000000.miner,
            blcokResult4000000.stateRoot,
            blcokResult4000000.transactionsRoot,
            blcokResult4000000.receiptsRoot,
            blcokResult4000000.logsBloom,
            eval(blcokResult4000000.number).toString(),
            eval(blcokResult4000000.gasLimit).toString(),
            eval(blcokResult4000000.gasUsed).toString(),
            eval(blcokResult4000000.timestamp).toString(),
            blcokResult4000000.extraData,
            blcokResult4000000.mixHash,
            blcokResult4000000.nonce,
            eval(blcokResult4000000.baseFeePerGas).toString(),
        ];

        //console.log(header4000000)

        let ist4000000 = await mockVerify.decodeExtraData(blcokResult4000000.extraData);
        //console.log(ist4000000)

        let validatorsInfo = await getValidatorsInfo(80);

        await proxy.updateBlockHeader(validatorsInfo, header4000000, ist4000000, proof4000000);

        expect(await proxy.headerHeight()).to.be.equal("4000000");

        let verifyProof =
            "0x00000000000000000000000000000000000000000000000000000000000001201f4229dc003ed5f131b93b90b106cb496bcf5e142ed89d69daa7cf623d60fd022e0d3b1b8fa5023c591858cc9944d954260309db97fa037d0b971d030fb7c9772167911bdbf3b8745e1d9a5d84da37334806c1dd1db2510145a4c99cda9761ec1ea6f1a0f4c0d309209bbdb99a414b764424f08e3c99667fd98fb8e7ab04eeff04311bfcfb7dcdcd6d2fba612ae99839ffba2356ae678e8611fcd96e506955de20b2ac38f6831781a5e4c68e67e55616c00e085c03d5f90d15ed011782bac8f92dccc6b450e26cbaa68d9a62b43d760598aba31ac37a332c995ecc7e7f00e89011b9a8f1869f0a08e7d26543a1505e528014e4b43cadf605e49d15afaae95674000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000006a01722b48239900e78c0c60876b08b8690e3f10caf3cc6d36bc88f934d3a96f13a24cde3ad1ac56391b8fbc95b3f10f184ac8878311fff3e7a2fa4da930a63a6822027228b8dcf18137e11babd59f06c8ba90f6a6da7b05e5bcb5d057bf8312b340224ccfd7f6bb2d08e143687a409ec964f7b6c060b05779d7639457bc809a35200000000000000000000000000000000000000000000000000000000000009e00000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000c2000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000e498d13527524132736d804c42a288d72a979e4600000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000240000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000003c45b80000000000000000000000000000000000000000000000000000000000c65d4000000000000000000000000000000000000000000000000000000000001ce1bd0000000000000000000000000000000000000000000000000000000063ec2c8b00000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000000000000000000000000000000000000020eafa49b8d864dee8638d2d39fddfab3f727e3c692dceb363345aa94883406e6a0000000000000000000000000000000000000000000000000000000000000020891cd4205c38c6214a3eac36d6f92015e9c6568beca83115591a31a1f0688c5c0000000000000000000000000000000000000000000000000000000000000020f3c977bd6f1c2915861c430f3cfcff0b1bd5ed4949523ec5cbdb41141ab0128400000000000000000000000000000000000000000000000000000000000000209d33d69c8139e453cc79803aae3095b46cb063636dfedc827c522e60c97c177000000000000000000000000000000000000000000000000000000000000001008000000000000000040000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000200000000000000040000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000010000000000000000000000000000000000000000000000000200000000000000004000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffd883010100846765746888676f312e31382e33856c696e757800000000000000f8ddc0c0c080b84179eca739a748a143925073d971c3d256d338d7cfb736c2787c55a8ea66310fc93a2d3a159ea64e437d8b204ea5889ad19cd74669b1430f702c61e355933f82f101f849850413fbff8fb8401feb6a00bc46409bc413a9897004b7ac7d5ab97a2a9229d3cbbf7f629514c98909662dddc6d4d7db41f52948e60741308799185572aef4898e4369f28b59256780f84985043fd3eadfb840055af51da142259c0ebf8b92100297571fd95d73f136c19923e914d2ee60811106d8ae7d74532cd7e2c9a39398d296461d49bedb8217ebbfe14275c725874d268000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004179eca739a748a143925073d971c3d256d338d7cfb736c2787c55a8ea66310fc93a2d3a159ea64e437d8b204ea5889ad19cd74669b1430f702c61e355933f82f101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000413fbff8f0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401feb6a00bc46409bc413a9897004b7ac7d5ab97a2a9229d3cbbf7f629514c98909662dddc6d4d7db41f52948e60741308799185572aef4898e4369f28b592567000000000000000000000000000000000000000000000000000000043fd3eadf000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040055af51da142259c0ebf8b92100297571fd95d73f136c19923e914d2ee60811106d8ae7d74532cd7e2c9a39398d296461d49bedb8217ebbfe14275c725874d2600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018af9018701831ce1bdbf87df87b941d621078676d7bdd75fc7f5ebbabaddc9a65e3c5f863a034a75be8a536c66a8f450ebf1377a59caebe86a32a1e3c3f6f3ae1eeff21854ea0000000000000000000000000e0dc8d7f134d0a79019bef9c2fd4b2013a64fcd6a0000000000000000000000000000000000000000000000000000000000257b2af800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000194f90191822080b9018b02f9018701831ce1bdbf87df87b941d621078676d7bdd75fc7f5ebbabaddc9a65e3c5f863a034a75be8a536c66a8f450ebf1377a59caebe86a32a1e3c3f6f3ae1eeff21854ea0000000000000000000000000e0dc8d7f134d0a79019bef9c2fd4b2013a64fcd6a0000000000000000000000000000000000000000000000000000000000257b2af80000000000000000000000000";

        let verifyData = await proxy.verifyProofData(verifyProof);

        expect(verifyData.success).to.be.equal(true);
    });

    it("updateBlockHeader height 4050000", async function () {
        console.log(await proxy.maxValidators());

        expect(await proxy.headerHeight()).to.be.equal("4000000");

        let data40500000 = await axios.get("http://47.242.33.167:8181/proof?chain_id=22776&height=4050000");
        //console.log(data38500000.data.data.result.proof)
        let proof4050000 = [
            data40500000.data.data.result.proof.pi_a[0],
            data40500000.data.data.result.proof.pi_a[1],
            data40500000.data.data.result.proof.pi_b[0][0],
            data40500000.data.data.result.proof.pi_b[0][1],
            data40500000.data.data.result.proof.pi_b[1][0],
            data40500000.data.data.result.proof.pi_b[1][1],
            data40500000.data.data.result.proof.pi_c[0],
            data40500000.data.data.result.proof.pi_c[1],
        ];
        //console.log(proof3850000);

        let startHeight = "0x" + Number(4050000).toString(16);
        //console.log(startHeight)
        let questData4050000 = {
            id: "1",
            jsonrpc: "2.0",
            method: "eth_getBlockByNumber",
            params: [startHeight, true],
        };
        let block4050000 = await axios.post("https://rpc.maplabs.io/", questData4050000);
        let blcokResult4050000 = block4050000.data.result;

        let header4050000 = [
            blcokResult4050000.parentHash,
            blcokResult4050000.miner,
            blcokResult4050000.stateRoot,
            blcokResult4050000.transactionsRoot,
            blcokResult4050000.receiptsRoot,
            blcokResult4050000.logsBloom,
            eval(blcokResult4050000.number).toString(),
            eval(blcokResult4050000.gasLimit).toString(),
            eval(blcokResult4050000.gasUsed).toString(),
            eval(blcokResult4050000.timestamp).toString(),
            blcokResult4050000.extraData,
            blcokResult4050000.mixHash,
            blcokResult4050000.nonce,
            eval(blcokResult4050000.baseFeePerGas).toString(),
        ];

        //console.log(header4050000)

        let ist4050000 = await mockVerify.decodeExtraData(blcokResult4050000.extraData);
        //console.log(ist4050000)

        let validatorsInfo = await getValidatorsInfo(81);

        await proxy.updateBlockHeader(validatorsInfo, header4050000, ist4050000, proof4050000);

        expect(await proxy.headerHeight()).to.be.equal("4050000");
    });
});
