use std::ops::Add;
use std::thread::sleep;
use std::time::Duration;
// macro allowing us to convert human readable units to workspace units.
use near_units::parse_near;

// macro allowing us to convert args into JSON bytes to be read by the contract.
use serde_json::json;

// Additional convenient imports that allows workspaces to function readily.
use workspaces::{prelude::*, Worker, DevNetwork, Contract};
use workspaces::network::Sandbox;

const MAP_CLIENT_WASM_FILEPATH: &str = "./target/wasm32-unknown-unknown/release/map_light_client.wasm";

/*
0
bls priv key:  0x230542ab27067b13089165757c4dfb02f67440c5b8888994de33b015bb07a142
g2 pub key:  0x2d692ebfd5b28f869cf87b12688504f1fd2194ad68d0bcbdde5f03ec45e98ef82e4114565378770ff9b81cc4488bbe93ba4dfaadf7a54c088560397588c1ab7c0de7dc40658ca64443100d757e9236555e7e1929edc3f398fa508ab5926bf1510eeabadcda0e475fcc4274349bdabdbf3c3855cc37548e2ebf7b0314436bee29
g1 pub key:  0x285b454a87ab802bca118adb5d36ec205e0aa2f373afc03555d91e41cbfffbae218a5545ea930860c0b99462596ee86f3278a5207c42bd63cb8dfaa54e0d68e3
secp256k1 priv key:  0x5655df9f81c8e045cf86d2e2e77778b9fa952c46391c29c41c96dedc533a64ad
secp256k1 pub key:  0x04d7aed26a1bf17e3ae412b24b194f4f4150066e963b99bad2361a149b80878c1f4574b3ecf5cacf3a258291eed55c19ef5fc38a084ef22d05dddf943ddf4f9463
secp256k1 address:  0x908D0FDaEAEFbb209BDcb540C2891e75616154b3
1
bls priv key:  0x23ee418be99759ba1a95389c47e21eccbaea41cc73261775ba7813dd6746e97c
g2 pub key:  0x2d12b2b13b2fc35845b0a7a4b1c4b794457ebe4dc176e9ec258a8b636d785623179b51bff3e3cb9ead360751665a14c238d15e828a6825b8c0d4f3b9a05837f006900ef3770f0f05ea7477415c98ac6182212f0d88dcc6b7f1b0cea61fd4b5bd1283e94132d5912258b0f1675056afafb71e33979df7c1776517ba37da38dadb
g1 pub key:  0x0d570979e84f504247c0ab6c1bc98967a300192132707a6d144cce74d77ab11a28feb22d09573a136a1ae43f0329f77be54968035d7b29161de64068b52fa0fb
secp256k1 priv key:  0x0a5f9842b46058800bec478523aa6e1141f592924ecda0d22074daf89045f396
secp256k1 pub key:  0x04139a44005d256d8b16da81b6caae548677814a514b592a68b10033276b353899f925efdaf78b1becaa8a905a57158ced6d1c9fa20c04529c63770f99e8858123
secp256k1 address:  0xEbf0E9FbC6210F199d1C34f2418b64129e7FF78A
2
bls priv key:  0x076a163412db5112c2de534976dc6f1cc4d3b1f1e5c1afa4e4a34e2aea0a14d5
g2 pub key:  0x1041c19ccd878527886aff2e70a2f07db76c3fa3155823677abb551bd480a5f329b1f7ea9a3aa75613faf865f960acad8e04bb661a8b8e87e48d172c83fd4c2b2255c47c8e92e5329ee42033153f8c9750ab5042f6d89f27add64e0d5fba36c623789ad2fdcbc68dd30d19c33ec60cde4d431411aa7ec754038c2fa8ffb41db4
g1 pub key:  0x06123bea2fdc5ca96f7b3810d7abb489bd04fa3db73487e82261bb0a768d96861958a18770f574432dd56665f8214ee885780c00de9e47f8a20e7b7075fa2448
secp256k1 priv key:  0xdbf57d88561e0f53c227b2229c4b3fb2bf36bda0e1a852a902cc421c8c5a787d
secp256k1 pub key:  0x04e55d879826dfedf134f1bd2043130d90dc3055ed564bc11c2f69c4624f2908ca07b322598c9a8666cd4532381ced27d67c23e4df3aed8f890d4aeabbb7f98dba
secp256k1 address:  0x8f189338912AC69AB776318A32Ad7473731a955F
3
bls priv key:  0x05f0159fe779e38e0ce377c02e5923826db71683b29628d96467dfcdb569158b
g2 pub key:  0x1b9fe96534980d89088570afeb7c6d1bb7db8c72df20e8f6a4ab2f4fde12e68609ce26b976e80794470dd62ed18e9a5402f3f0382aac051ac03f40478dc40a8d297b4dcc2c5edf9accd55a726bff6dd646adac58220c0f51dd0d0c7a66ffab870a1f48d542f5c97d9b6049d4a49f408612d6d1ce811bae95c68573cdc1ba648b
g1 pub key:  0x055c69baeedb58db6e1467eb7d1d51347ffe8bc9e30be2cf8638d8bf9b9b9a531c13d30bd973eabbc38c87b8ca3a846db126fcf62bfebe8516ca0b26f959b9ff
secp256k1 priv key:  0xd89e9314e35b989c6c9d0889faf0fcfe81005d4c589744ec58fd394bc37ad2d2
secp256k1 pub key:  0x040bfff54b4427902673b815426d0fbc375d613d252fa7865452f91f150f5e245aeff786e2b48c016d6ed26ce8284f0e899a5513c433f9d142a1727754cc9ca91a
secp256k1 address:  0xD762eD84dB64848366E74Ce43742C1960Ba62304
 */

const ADDRESSES: [[i32; 20]; 4] = [[144, 141, 15, 218, 234, 239, 187, 32, 155, 220, 181, 64, 194, 137, 30, 117, 97, 97, 84, 179], [235, 240, 233, 251, 198, 33, 15, 25, 157, 28, 52, 242, 65, 139, 100, 18, 158, 127, 247, 138], [143, 24, 147, 56, 145, 42, 198, 154, 183, 118, 49, 138, 50, 173, 116, 115, 115, 26, 149, 95], [215, 98, 237, 132, 219, 100, 132, 131, 102, 231, 76, 228, 55, 66, 193, 150, 11, 166, 35, 4]];

#[tokio::test]
async fn test_single_seal() -> anyhow::Result<()> {
    let (worker, contract) = deploy_contract().await?;

    let res = contract
        .call(&worker, "new")
        .args_json(json!({
            "threshold": 1,
            "pair_keys":[{"x":"0x285b454a87ab802bca118adb5d36ec205e0aa2f373afc03555d91e41cbfffbae","y":"0x218a5545ea930860c0b99462596ee86f3278a5207c42bd63cb8dfaa54e0d68e3"},
                {"x":"0x0d570979e84f504247c0ab6c1bc98967a300192132707a6d144cce74d77ab11a","y":"0x28feb22d09573a136a1ae43f0329f77be54968035d7b29161de64068b52fa0fb"},
                {"x":"0x06123bea2fdc5ca96f7b3810d7abb489bd04fa3db73487e82261bb0a768d9686","y":"0x1958a18770f574432dd56665f8214ee885780c00de9e47f8a20e7b7075fa2448"},
                {"x":"0x055c69baeedb58db6e1467eb7d1d51347ffe8bc9e30be2cf8638d8bf9b9b9a53","y":"0x1c13d30bd973eabbc38c87b8ca3a846db126fcf62bfebe8516ca0b26f959b9ff"}],
            "addresses":ADDRESSES,
            "weights":[1, 1, 1, 1],
            "epoch":1,
            "epoch_size":1000,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success(), "new contract failed");

    let res = contract
        .call(&worker, "update_block_header")
        .args_json(json!({
            "header": {
                "parentHash":"0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7",
                "coinbase":"0x908D0FDaEAEFbb209BDcb540C2891e75616154b3",
                "root":"0xecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217",
                "txHash":"0xd35d334d87c0cc0a202e3756bf81fae08b1575f286c7ee7a3f8df4f0f3afc55d",
                "receiptHash":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                "bloom":"0x
                "number":"0x3e8",
                "gasLimit":"0x0",
                "gasUsed":"0x5208",
                "time":"0x5c47775c",
                "extra":"0x0000000000000000000000000000000000000000000000000000000000000000f891c0c0c080b841f60b76e90a3d7c0e2d0ab778d579f5a4c7c416a9d53fb30544fe2372a3f9e582319c64345609868e0021ae757fa0e5e354f862d5d6815a18ba0d0efb1e7290cf01f84401b84025dc03734306e5fa8a09f53a920e1a728748b36ebb391463c257deee0b5a033a0f9d570179b6ba38bf5309d64b39236eeda2710370cff2dd61319a9f945ffce301c3808080",
                "minDigest":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "nonce":"0x0000000000000000",
                "baseFee":"0x0"
            },
            "agg_pk":{"xr":"0x2e4114565378770ff9b81cc4488bbe93ba4dfaadf7a54c088560397588c1ab7c",
                "xi":"0x2d692ebfd5b28f869cf87b12688504f1fd2194ad68d0bcbdde5f03ec45e98ef8",
                "yr":"0x0eeabadcda0e475fcc4274349bdabdbf3c3855cc37548e2ebf7b0314436bee29",
            "yi":"0x0de7dc40658ca64443100d757e9236555e7e1929edc3f398fa508ab5926bf151"}
,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success(), "update_block_header failed");

    Ok(())
}

#[tokio::test]
async fn test_multi_seal() -> anyhow::Result<()> {
    let (worker, contract) = deploy_contract().await?;

    let res = contract
        .call(&worker, "new")
        .args_json(json!({
            "threshold": 1,
            "pair_keys":[{"x":"0x285b454a87ab802bca118adb5d36ec205e0aa2f373afc03555d91e41cbfffbae","y":"0x218a5545ea930860c0b99462596ee86f3278a5207c42bd63cb8dfaa54e0d68e3"},
                {"x":"0x0d570979e84f504247c0ab6c1bc98967a300192132707a6d144cce74d77ab11a","y":"0x28feb22d09573a136a1ae43f0329f77be54968035d7b29161de64068b52fa0fb"},
                {"x":"0x06123bea2fdc5ca96f7b3810d7abb489bd04fa3db73487e82261bb0a768d9686","y":"0x1958a18770f574432dd56665f8214ee885780c00de9e47f8a20e7b7075fa2448"},
                {"x":"0x055c69baeedb58db6e1467eb7d1d51347ffe8bc9e30be2cf8638d8bf9b9b9a53","y":"0x1c13d30bd973eabbc38c87b8ca3a846db126fcf62bfebe8516ca0b26f959b9ff"}],
            "addresses":ADDRESSES,
            "weights":[1, 1, 1, 1],
            "epoch":1,
            "epoch_size":1000,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success());

    let res = contract
        .call(&worker, "update_block_header")
        .args_json(json!({
            "header": {
                "parentHash":"0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7",
                "coinbase":"0x908D0FDaEAEFbb209BDcb540C2891e75616154b3",
                "root":"0xecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217",
                "txHash":"0xd35d334d87c0cc0a202e3756bf81fae08b1575f286c7ee7a3f8df4f0f3afc55d",
                "receiptHash":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
                "bloom":"0x
                "number":"0x3e8",
                "gasLimit":"0x0",
                "gasUsed":"0x5208",
                "time":"0x5c47775c",
                "extra":"0x0000000000000000000000000000000000000000000000000000000000000000f891c0c0c080b841f60b76e90a3d7c0e2d0ab778d579f5a4c7c416a9d53fb30544fe2372a3f9e582319c64345609868e0021ae757fa0e5e354f862d5d6815a18ba0d0efb1e7290cf01f84405b840017015df78ea9aa0f55ea747c7278b4faef217c4a177db50589220366075f35313bb98a03294ad47f1ddd7c6f6f16306b6c7a487e4f476afe299d4107cbad2da01c3808080",
                "minDigest":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "nonce":"0x0000000000000000",
                "baseFee":"0x0"
            },
            "agg_pk":{"xr":"0x2dcc118d53d5790ec010a462d95b4e7d2d51fde235cb9565a91322fe46dbfea9",
                "xi":"0x1ff1837f18fa67897e1bf2819456e0b032b634185fc6c90b6f5dbb3f9cc56779",
                "yr":"0x1b8a5c40b7b0ce6876a5eeb1c9825446cf9b10ad623de5a2f6117b8d306ac3ae",
            "yi":"0x198351362909074ab792fe6c51efc3f4cb392a05d9bc218bf390eca0b64f87e6"}
,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success(), "update_block_header failed");

    Ok(())
}

#[tokio::test]
async fn test_verify_proof_single_receipt() -> anyhow::Result<()> {
    let (worker, contract) = deploy_contract().await?;

    let res = contract
        .call(&worker, "new")
        .args_json(json!({
            "threshold": 1,
            "pair_keys":[{"x":"0x285b454a87ab802bca118adb5d36ec205e0aa2f373afc03555d91e41cbfffbae","y":"0x218a5545ea930860c0b99462596ee86f3278a5207c42bd63cb8dfaa54e0d68e3"},
                {"x":"0x0d570979e84f504247c0ab6c1bc98967a300192132707a6d144cce74d77ab11a","y":"0x28feb22d09573a136a1ae43f0329f77be54968035d7b29161de64068b52fa0fb"},
                {"x":"0x06123bea2fdc5ca96f7b3810d7abb489bd04fa3db73487e82261bb0a768d9686","y":"0x1958a18770f574432dd56665f8214ee885780c00de9e47f8a20e7b7075fa2448"},
                {"x":"0x055c69baeedb58db6e1467eb7d1d51347ffe8bc9e30be2cf8638d8bf9b9b9a53","y":"0x1c13d30bd973eabbc38c87b8ca3a846db126fcf62bfebe8516ca0b26f959b9ff"}],
            "addresses":ADDRESSES,
            "weights":[1, 1, 1, 1],
            "epoch":1,
            "epoch_size":1000,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success());

    let res = contract
        .call(&worker, "verify_proof_data")
        .args_json(json!({
            "receipt_proof" : {
            "header": {
                "parentHash":"0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7",
                "coinbase":"0x908D0FDaEAEFbb209BDcb540C2891e75616154b3",
                "root":"0xecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217",
                "txHash":"0xd35d334d87c0cc0a202e3756bf81fae08b1575f286c7ee7a3f8df4f0f3afc55d",
                "receiptHash":"0xc502fb6c3ccb075c3e4425885ce26c3b00dba0cf86f4016abcc375eb79dedfab",
                "bloom":"0x
                "number":"0x3e8",
                "gasLimit":"0x0",
                "gasUsed":"0x5208",
                "time":"0x5c47775c",
                "extra":"0x0000000000000000000000000000000000000000000000000000000000000000f891c0c0c080b841c908b835bd729c65c3c0c1b4759012e0250c708fc01d3db5fe5956eabee32a1616fbc4d8be4e34f8aee5b22b3f34d31b86b6ccdc2b96994a175a1cca0df5b04e00f84405b840089913a78d8821992d579aa1183faab3952a582bde9b4f99b390c5480e29f83d18679b5036c7c4c2da70e4f1c9e4002faacc7b65a92da4464eeaad8618075d8b01c3808080",
                "minDigest":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "nonce":"0x0000000000000000",
                "baseFee":"0x0"
            },

            "agg_pk":{
                    "xr":"0x2dcc118d53d5790ec010a462d95b4e7d2d51fde235cb9565a91322fe46dbfea9",
                    "xi":"0x1ff1837f18fa67897e1bf2819456e0b032b634185fc6c90b6f5dbb3f9cc56779",
                    "yr":"0x1b8a5c40b7b0ce6876a5eeb1c9825446cf9b10ad623de5a2f6117b8d306ac3ae",
                    "yi":"0x198351362909074ab792fe6c51efc3f4cb392a05d9bc218bf390eca0b64f87e6"
                },
            "receipt": {
                    "receipt_type": 1,
                    "post_state_or_status": "0x00",
                    "cumulative_gas_used": 2000,
                    "bloom": "0x
                    "logs": [{
                        "address": "0x0000000000000000000000000000000000000000",
                        "topics": ["0x0000000000000000000000000000000000000000000000000000000000000000"],
                        "data": "0x00"}]
            },
                "key_index":"0x80",
                "proof":["0xf9014d822080b9014701f90143008207d0bf83af838940000000000000000000000000000000000000000e1a0000000000000000000000000000000000000000000000000000000000000000000"]
        }
,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    Ok(())
}

#[tokio::test]
async fn test_verify_proof_multi_receipt() -> anyhow::Result<()> {
    let (worker, contract) = deploy_contract().await?;

    let res = contract
        .call(&worker, "new")
        .args_json(json!({
            "threshold": 1,
            "pair_keys":[{"x":"0x285b454a87ab802bca118adb5d36ec205e0aa2f373afc03555d91e41cbfffbae","y":"0x218a5545ea930860c0b99462596ee86f3278a5207c42bd63cb8dfaa54e0d68e3"},
                {"x":"0x0d570979e84f504247c0ab6c1bc98967a300192132707a6d144cce74d77ab11a","y":"0x28feb22d09573a136a1ae43f0329f77be54968035d7b29161de64068b52fa0fb"},
                {"x":"0x06123bea2fdc5ca96f7b3810d7abb489bd04fa3db73487e82261bb0a768d9686","y":"0x1958a18770f574432dd56665f8214ee885780c00de9e47f8a20e7b7075fa2448"},
                {"x":"0x055c69baeedb58db6e1467eb7d1d51347ffe8bc9e30be2cf8638d8bf9b9b9a53","y":"0x1c13d30bd973eabbc38c87b8ca3a846db126fcf62bfebe8516ca0b26f959b9ff"}],
            "addresses":ADDRESSES,
            "weights":[1, 1, 1, 1],
            "epoch":1,
            "epoch_size":1000,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success());

    let res = contract
        .call(&worker, "verify_proof_data")
        .args_json(json!({
            "receipt_proof" : {
            "header": {
                "parentHash":"0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7",
                "coinbase":"0x908D0FDaEAEFbb209BDcb540C2891e75616154b3",
                "root":"0xecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217",
                "txHash":"0xd35d334d87c0cc0a202e3756bf81fae08b1575f286c7ee7a3f8df4f0f3afc55d",
                "receiptHash":"0x209e5a7f764f4adb03b2799a8ba555694806cd4d8f593776e263fd90f0630f42",
                "bloom":"0x
                "number":"0x3e8",
                "gasLimit":"0x0",
                "gasUsed":"0x5208",
                "time":"0x5c47775c",
                "extra":"0x0000000000000000000000000000000000000000000000000000000000000000f891c0c0c080b84114257672f5280ba50f7fbbdfb53332225a7aa3521fd886dbc22a205e4b93c46b38baa3cfbb12c0aa8839c9bb89c6a280c135a3f9d39d6056d389e465c8022d2f00f84405b8402f4bac1701d21cdda7bd1542d751840057404c4f16d0fe46cde7a4047b31a52002607ca88462f0c3cc84d523dfe8fbe0a608a7baac648f20a0c3fc55683672ec01c3808080",
                "minDigest":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "nonce":"0x0000000000000000",
                "baseFee":"0x0"
            },

            "agg_pk":{
                    "xr":"0x2dcc118d53d5790ec010a462d95b4e7d2d51fde235cb9565a91322fe46dbfea9",
                    "xi":"0x1ff1837f18fa67897e1bf2819456e0b032b634185fc6c90b6f5dbb3f9cc56779",
                    "yr":"0x1b8a5c40b7b0ce6876a5eeb1c9825446cf9b10ad623de5a2f6117b8d306ac3ae",
                    "yi":"0x198351362909074ab792fe6c51efc3f4cb392a05d9bc218bf390eca0b64f87e6"
                },
            "receipt": {
                    "receipt_type": 1,
                    "post_state_or_status": "0x01",
                    "cumulative_gas_used": 2000,
                    "bloom": "0x
                    "logs": [{
                        "address": "0x0100000000000000000000000000000000000000",
                        "topics": ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x000000000000000000000000000000000000000000000000000000000000000a"],
                        "data": "0x01"}]
            },
                "key_index":"0x01",
                "proof":["0xf851a0141842b8380e7bf9240f0d0e46856a2675b85df570e95bdceec55b495629d4ca80808080808080a0a0a3ab578877d4702cfb44ffa01ae96b2365aacbe55715c8d6222174233dd6208080808080808080",
                "0xf85180a01ee4849328db1b6425ffeb9c54f70604fa6e855a7d0d55a0471645e14ab7cae9a0275c5d8aa15b6a2f8b17619ce74fbf1bc92d11f0bae44f226b14dde1a603e25a8080808080808080808080808080",
                "0xf9016d20b9016901f90165018207d0bf85cf85a940100000000000000000000000000000000000000f842a00000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000000a01"]
        }
,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success(), "verify_proof_data failed");

    Ok(())
}

#[tokio::test]
async fn test_update_validator() -> anyhow::Result<()> {
    let (worker, contract) = deploy_contract().await?;

    let res = contract
        .call(&worker, "new")
        .args_json(json!({
            "threshold": 1,
            "pair_keys":[{"x":"0x285b454a87ab802bca118adb5d36ec205e0aa2f373afc03555d91e41cbfffbae","y":"0x218a5545ea930860c0b99462596ee86f3278a5207c42bd63cb8dfaa54e0d68e3"},
                {"x":"0x0d570979e84f504247c0ab6c1bc98967a300192132707a6d144cce74d77ab11a","y":"0x28feb22d09573a136a1ae43f0329f77be54968035d7b29161de64068b52fa0fb"}],
            "addresses":[[144, 141, 15, 218, 234, 239, 187, 32, 155, 220, 181, 64, 194, 137, 30, 117, 97, 97, 84, 179], [235, 240, 233, 251, 198, 33, 15, 25, 157, 28, 52, 242, 65, 139, 100, 18, 158, 127, 247, 138]],
            "weights":[1, 1],
            "epoch":1,
            "epoch_size":1000,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success());

    let res = contract
        .call(&worker, "update_block_header")
        .args_json(json!({
            "header": {
                "parentHash":"0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7",
                "coinbase":"0x908D0FDaEAEFbb209BDcb540C2891e75616154b3",
                "root":"0xecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217",
                "txHash":"0xd35d334d87c0cc0a202e3756bf81fae08b1575f286c7ee7a3f8df4f0f3afc55d",
                "receiptHash":"0x209e5a7f764f4adb03b2799a8ba555694806cd4d8f593776e263fd90f0630f42",
                "bloom":"0x
                "number":"0x3e8",
                "gasLimit":"0x0",
                "gasUsed":"0x5208",
                "time":"0x5c47775c",
                "extra":"0x0000000000000000000000000000000000000000000000000000000000000000f90246ea948f189338912ac69ab776318a32ad7473731a955f94d762ed84db64848366e74ce43742c1960ba62304f90104b88006123bea2fdc5ca96f7b3810d7abb489bd04fa3db73487e82261bb0a768d96861958a18770f574432dd56665f8214ee885780c00de9e47f8a20e7b7075fa24482255c47c8e92e5329ee42033153f8c9750ab5042f6d89f27add64e0d5fba36c623789ad2fdcbc68dd30d19c33ec60cde4d431411aa7ec754038c2fa8ffb41db4b880055c69baeedb58db6e1467eb7d1d51347ffe8bc9e30be2cf8638d8bf9b9b9a531c13d30bd973eabbc38c87b8ca3a846db126fcf62bfebe8516ca0b26f959b9ff297b4dcc2c5edf9accd55a726bff6dd646adac58220c0f51dd0d0c7a66ffab870a1f48d542f5c97d9b6049d4a49f408612d6d1ce811bae95c68573cdc1ba648bf884b84000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b8400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003b8419375d2fafa01c306579858d813dff765ed1f9bdadea191650a3825c6564c4a6f63ef9fdea7ebfe8b7c1095a1dd7b79375db5ba172e375e013704a31e2860286101f84403b8402e3b4244b70a9b32a62002b2ef18ac9d7a19f1c114ac7bd5d86e001e3d8631e62002b06250e61d41213b02716d554db75bf79bf650df646b43589420d9628ccf01c3808080",
                "minDigest":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "nonce":"0x0000000000000000",
                "baseFee":"0x0"
            },
            "agg_pk":{"xr":"0x1d65a1b84c31d19a0596dc5df68a8ee3bff4640ba973bc90ea91333196116891",
                "xi":"0x0e9462421703b53a5112487313ac2c1a48c886453190c57b445b622afe918aeb",
                "yr":"0x1f361674d6ecd3a8b689cdcda430e7df580d478d87795f0bfb71f7d660667f2d",
            "yi":"0x05f3fae8626e70a4efe32383f3dc72b8c268ee04e6f0aadd61114a1d9e1d7869"}
,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    assert!(res.is_success(), "update_block_header failed");

    let res = contract
        .call(&worker, "verify_proof_data")
        .args_json(json!({
            "receipt_proof" : {
            "header": {
                "parentHash":"0x7285abd5b24742f184ad676e31f6054663b3529bc35ea2fcad8a3e0f642a46f7",
                "coinbase":"0x8f189338912AC69AB776318A32Ad7473731a955F",
                "root":"0xecc60e00b3fe5ce9f6e1a10e5469764daf51f1fe93c22ec3f9a7583a80357217",
                "txHash":"0xd35d334d87c0cc0a202e3756bf81fae08b1575f286c7ee7a3f8df4f0f3afc55d",
                "receiptHash":"0x209e5a7f764f4adb03b2799a8ba555694806cd4d8f593776e263fd90f0630f42",
                "bloom":"0x
                "number":"0x3e9",
                "gasLimit":"0x0",
                "gasUsed":"0x5208",
                "time":"0x5c47775c",
                "extra":"0x0000000000000000000000000000000000000000000000000000000000000000f891c0c0c080b84170786ebcc2d27b15ec7fb8a9ec91ad9521a99d24f2e5f58e9c03e75f37a90ac968170e36fcfe90f21ae66f0157dc623841fa673d834c3dbf15c04b3e2df551c801f8440cb8401c2561a5e5ae3d95e4ac2f68090b55c284f4b69e9bedaf30a3a1d90e95e8a28a00069e8d836e48a93789eae4976e2f6e757dac7400514386b5934fa2038ba09201c3808080",
                "minDigest":"0x0000000000000000000000000000000000000000000000000000000000000000",
                "nonce":"0x0000000000000000",
                "baseFee":"0x0"
            },

            "agg_pk":{
                    "xr":"0x15cacb62d19336598f911c221f88f1ed9cb8a5db0965ca9e31b8afd7d3c77110",
                    "xi":"0x19753182114d613a0d534f17bc85ddd5788527ba475f75f0345c65519324550d",
                    "yr":"0x0e161212c7671b043c527950c79c5f64dcb501e16e72102935acb8605e06088d",
                    "yi":"0x1d324298ff9410992ce58563dcb0d87236452d9976c569c5251119512bb64381"
                },
            "receipt": {
                    "receipt_type": 1,
                    "post_state_or_status": "0x00",
                    "cumulative_gas_used": 2000,
                    "bloom": "0x
                    "logs": [{
                        "address": "0x0000000000000000000000000000000000000000",
                        "topics": ["0x0000000000000000000000000000000000000000000000000000000000000000"],
                        "data": "0x00"}]
            },
                "key_index":"0x80",
                "proof":["0xf9014d822080b9014701f90143008207d0bf83af838940000000000000000000000000000000000000000e1a0000000000000000000000000000000000000000000000000000000000000000000"]
        }
,
        }))?
        .gas(300_000_000_000_000)
        .transact()
        .await?;

    Ok(())
}

async fn deploy_contract() -> anyhow::Result<(Worker<Sandbox>, Contract)> {
    // TODO
    // std::env::set_var("NEAR_SANDBOX_BIN_PATH", "/Users/rong/Projects/near/nearcore/target/debug/neard-sandbox");
    let worker = workspaces::sandbox().await?;
    let contract = worker
        .dev_deploy(&std::fs::read(MAP_CLIENT_WASM_FILEPATH)?)
        .await?;

    println!("deploy contract id: {:?}", contract.id());

    Ok((worker, contract))
}