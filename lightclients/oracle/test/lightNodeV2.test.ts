import { time, loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { anyValue } from "@nomicfoundation/hardhat-chai-matchers/withArgs";
import { expect } from "chai";
import { ethers } from "hardhat";
import { BigNumber } from "ethers";
import { TxLog, ReceiptProof, TxReceipt, index2key, ProofData } from "../utils/Util";
import { keccak256 } from "ethers/lib/utils";

let chainId = 137;

describe("LightNode", function () {
    // We define a fixture to reuse the same setup in every test.
    // We use loadFixture to run this setup once, snapshot that state,
    // and reset Hardhat Network to that snapshot in every test.
    async function deployFixture() {
        let [wallet] = await ethers.getSigners();

        const MPTVerify = await ethers.getContractFactory("MPTVerify");

        const mPTVerify = await MPTVerify.deploy();

        await mPTVerify.connect(wallet).deployed();

        const LightNode = await ethers.getContractFactory("LightNodeV2");

        const lightNode = await LightNode.deploy();

        await lightNode.connect(wallet).deployed();

        const LightNodeProxy = await ethers.getContractFactory("LightNodeProxy");

        let initData = LightNode.interface.encodeFunctionData("initialize", [
            chainId,
            wallet.address,
            mPTVerify.address,
            2
        ]);

        const lightNodeProxy = await LightNodeProxy.deploy(lightNode.address, initData);

        await lightNodeProxy.connect(wallet).deployed();

        let proxy = LightNode.attach(lightNodeProxy.address);

        return proxy;
    }

    describe("Deployment", function () {

        it("upgradeTo() -> reverts only Admin", async function () {
            let [wallet, other] = await ethers.getSigners();

            let lightNode = await loadFixture(deployFixture);

            let admin = await lightNode.getAdmin();

            expect(admin).to.not.eq(other.address);

            const LightNode = await ethers.getContractFactory("LightNode");
            const newImplement = await LightNode.connect(wallet).deploy();
            await newImplement.deployed();

            await expect(lightNode.connect(other).upgradeTo(newImplement.address)).to.be.revertedWith(
                "LightNode: only Admin can upgrade"
            );
        });

        it("upgradeTo() -> correct", async function () {
            let [wallet, other] = await ethers.getSigners();

            let lightNode = await loadFixture(deployFixture);

            let admin = await lightNode.getAdmin();

            expect(admin).to.not.eq(other.address);

            const LightNode = await ethers.getContractFactory("LightNode");
            const newImplement = await LightNode.connect(wallet).deploy();
            await newImplement.deployed();

            let oldImplement = await lightNode.getImplementation();

            expect(oldImplement).to.not.eq(newImplement.address);

            await lightNode.connect(wallet).upgradeTo(newImplement.address);

            expect(await lightNode.getImplementation()).to.eq(newImplement.address);
        });

        it("changeAdmin() -> reverts only Admin", async function () {
            let [wallet, other] = await ethers.getSigners();

            let lightNode = await loadFixture(deployFixture);

            let admin = await lightNode.getAdmin();

            expect(admin).to.eq(wallet.address);

            await expect(lightNode.connect(other).setPendingAdmin(other.address)).to.be.revertedWith(
                "lightnode :: only admin"
            );
        });

        it("changeAdmin() -> reverts for zero address", async function () {
            let [wallet, other] = await ethers.getSigners();

            let lightNode = await loadFixture(deployFixture);

            let admin = await lightNode.getAdmin();

            expect(admin).to.eq(wallet.address);

            await expect(lightNode.connect(wallet).setPendingAdmin(ethers.constants.AddressZero)).to.be.revertedWith(
                "Ownable: pendingAdmin is the zero address"
            );
        });

        it("changeAdmin() -> correct ", async function () {
            let [wallet, other] = await ethers.getSigners();

            let lightNode = await loadFixture(deployFixture);

            let admin = await lightNode.getAdmin();

            expect(admin).to.eq(wallet.address);

            await (await lightNode.connect(wallet).setPendingAdmin(other.address)).wait();

            let pendingAdmin = await lightNode.pendingAdmin();

            expect(pendingAdmin).eq(other.address);

            await expect(lightNode.connect(wallet).changeAdmin()).to.be.revertedWith("only pendingAdmin");

            await (await lightNode.connect(other).changeAdmin()).wait();

            expect(await lightNode.getAdmin()).to.eq(other.address);
        });

        it("updateMultisg() -> correct ", async function () {
            let [wallet, addr1,addr2,addr3] = await ethers.getSigners();

            let lightNode = await loadFixture(deployFixture);
            
            let signers = [addr1.address,addr2.address,addr3.address]

            let quorum = 4;

            let info = await lightNode.multisigInfo();

            console.log(info)

            expect(info.quorum).eq(0);

            await expect(lightNode.updateMultisg(quorum,signers)).to.be.reverted
            
            quorum = 3 ;

            await lightNode.updateMultisg(quorum,signers);

            info = await lightNode.multisigInfo();

            console.log(info);

            expect(info.quorum).eq(3);

            quorum = 2;

            signers = [wallet.address,addr2.address,addr3.address]

            await lightNode.updateMultisg(quorum,signers);

            info = await lightNode.multisigInfo();

            console.log(info);

            expect(info.quorum).eq(2);

        });

        it("verifyProofData() -> correct ", async function () {
            let [wallet, addr1,addr2,addr3] = await ethers.getSigners();

            let lightNode = await loadFixture(deployFixture);

            const OracleV2 = await ethers.getContractFactory("OracleV2");

            const oracle = await OracleV2.deploy(wallet.address);
    
            await oracle.connect(wallet).deployed();

            let signers = [addr1.address,addr2.address,addr3.address]

            let quorum = 2;

            await lightNode.updateMultisg(quorum,signers);

            await oracle.updateMultisg(quorum,signers);

            let info = await lightNode.multisigInfo();

            let info1 = await oracle.multisigInfo();

            expect(info.version).eq(info1.version);

            
            let receiptRoot = "0x9d1a63e744550eebbb4d141e5b77c13cb1c21f40fb4f124bb9f161cea166b8ff";

            let blockNum = 12913052;

            let hash = keccak256(ethers.utils.solidityPack(["bytes32","bytes32","uint256","uint256"],[receiptRoot,info.version,blockNum,chainId]));

            let s1 = addr1.signMessage(ethers.utils.arrayify(hash));

            let s2 = addr2.signMessage(ethers.utils.arrayify(hash));

            await oracle.connect(addr1).proposal(chainId,blockNum,receiptRoot,s1)
            await expect(oracle.connect(addr2).proposal(chainId,blockNum,receiptRoot,s2)).to.be.emit(oracle,"Meet")

            let p = await oracle.proposalInfo(chainId,blockNum,receiptRoot,info.version);

            console.log(p);
            
            let proof = [
                '0xf851a0a53eec8ab8eec38caf8edb97c658b4b931ca81442d4f075a5a09fc22294e92ea80808080808080a0c2e19efc569610c301d1f51fae9a4ea27246fbb7d84d7f4b97b549afa167dd648080808080808080',
                '0xf90c2231b90c1e02f90c1a018359328bbf90b0ff89b94b877e3562a660c7861117c2f1361a26abaf19bebf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000057d124f8e7c713f89b94b877e3562a660c7861117c2f1361a26abaf19bebf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a0000000000000000000000000fc8d54a80e0facc51d6cb8dd2df61851932f8defa00000000000000000000000000000000000000000000000000001eb208c2dc000f89b94feb2b97e4efce787c08086dc16ab69e063911380f863a070813c9dca7020458095d8251d2a1268cfadf7eb8a1fd2054c571fca46fea906a015cd28c6671f94bb668821794199a87a646a44100c4548e7adcbf621a09554e5a0000000000000000000000000b877e3562a660c7861117c2f1361a26abaf19beba0000000000000000000000000000000000000000000000000000221b262dd8000f89b94b877e3562a660c7861117c2f1361a26abaf19bebf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000055af72960a4713f8bc9438384c75c47b8fc173f2c14a13cf0c5d513d57c1f863a07063ee7ac21ca792eb7d62d3a65598a5c986c4b0f7bd701aa453eb8a1387c956a0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000000000000c5099cb84000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000f8dd94624e6f327c4f91f1fa6285711245c215de264d49f884a06644f11ec136e82ae3a252660a2fea9e5d412868cd38474ba2ba564b8f19cb73a00000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000000000000c5099cb84000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000f9065d94feb2b97e4efce787c08086dc16ab69e063911380f863a0ca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a5a00000000000000000000000000000000000000000000000000000000000000038a00000000000000000000000000000000000000000000000000000000000000001b905e015cd28c6671f94bb668821794199a87a646a44100c4548e7adcbf621a09554e500000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000024cd33000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000142260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000047bb99ea4d791bb749d970de71ee0b1a340000000000000000000000000000000000000000000000000000000000000000000000000000000000000014bb21e441fb738f54e6ec244e435475096e179d6600000000000000000000000000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000f9593c32733fef3a8e0dc000151a742f641c123c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006287b7eabfe2e2e00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000284efa0646500000000000000000000000000000000000000000000000000000000000000200000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9593c32733fef3a8e0dc000151a742f641c123c00000000000000000000000000000000000000000000000006287b7eabfe2e2e00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc4500000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000000000000000000000000000000000000024cdc300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b2260fac5e5542a773aa44fbcfedf7c193bc2c5990001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89c94feb2b97e4efce787c08086dc16ab69e063911380f884a08131e5b107f7021b0773c1108755872d7b94bb31532fdf2256e0a3ef2c890a3da00000000000000000000000000000000000000000000000000000000000000038a000000000000000000000000000000000000000000000000000000000000058f8a0000000000000000000000000db61db256a30f3ef46110b8e2520aaec0db0815380'
              ]
            let receiptProof = {
                txReceipt:"0xf90c1a018359328bbf90b0ff89b94b877e3562a660c7861117c2f1361a26abaf19bebf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000057d124f8e7c713f89b94b877e3562a660c7861117c2f1361a26abaf19bebf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a0000000000000000000000000fc8d54a80e0facc51d6cb8dd2df61851932f8defa00000000000000000000000000000000000000000000000000001eb208c2dc000f89b94feb2b97e4efce787c08086dc16ab69e063911380f863a070813c9dca7020458095d8251d2a1268cfadf7eb8a1fd2054c571fca46fea906a015cd28c6671f94bb668821794199a87a646a44100c4548e7adcbf621a09554e5a0000000000000000000000000b877e3562a660c7861117c2f1361a26abaf19beba0000000000000000000000000000000000000000000000000000221b262dd8000f89b94b877e3562a660c7861117c2f1361a26abaf19bebf863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000055af72960a4713f8bc9438384c75c47b8fc173f2c14a13cf0c5d513d57c1f863a07063ee7ac21ca792eb7d62d3a65598a5c986c4b0f7bd701aa453eb8a1387c956a0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000000000000c5099cb84000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000f8dd94624e6f327c4f91f1fa6285711245c215de264d49f884a06644f11ec136e82ae3a252660a2fea9e5d412868cd38474ba2ba564b8f19cb73a00000000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000feb2b97e4efce787c08086dc16ab69e063911380a00000000000000000000000000000000000000000000000000000000000c5099cb84000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000f9065d94feb2b97e4efce787c08086dc16ab69e063911380f863a0ca1cf8cebf88499429cca8f87cbca15ab8dafd06702259a5344ddce89ef3f3a5a00000000000000000000000000000000000000000000000000000000000000038a00000000000000000000000000000000000000000000000000000000000000001b905e015cd28c6671f94bb668821794199a87a646a44100c4548e7adcbf621a09554e500000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000024cd33000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000142260fac5e5542a773aa44fbcfedf7c193bc2c599000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000047bb99ea4d791bb749d970de71ee0b1a340000000000000000000000000000000000000000000000000000000000000000000000000000000000000014bb21e441fb738f54e6ec244e435475096e179d6600000000000000000000000000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000002162b2aee2dd657fb131b28cc34dee6797b66f000000000000000000000000f9593c32733fef3a8e0dc000151a742f641c123c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006287b7eabfe2e2e00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000284efa0646500000000000000000000000000000000000000000000000000000000000000200000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9593c32733fef3a8e0dc000151a742f641c123c00000000000000000000000000000000000000000000000006287b7eabfe2e2e00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc4500000000000000000000000068b3465833fb72a70ecdf485e0e4c7bd8665fc45000000000000000000000000000000000000000000000000000000000024cdc300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000002b2260fac5e5542a773aa44fbcfedf7c193bc2c5990001f4c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f89c94feb2b97e4efce787c08086dc16ab69e063911380f884a08131e5b107f7021b0773c1108755872d7b94bb31532fdf2256e0a3ef2c890a3da00000000000000000000000000000000000000000000000000000000000000038a000000000000000000000000000000000000000000000000000000000000058f8a0000000000000000000000000db61db256a30f3ef46110b8e2520aaec0db0815380",
                receiptType:2,
                keyIndex:"0x0001",
                proof:proof
            }

            let ProofData = {
                blockNum:blockNum,
                receiptRoot:receiptRoot,
                signatures:p.signatures,
                receiptProof:receiptProof
            }

            let bytes = await lightNode.getBytes(ProofData);

            let result = await lightNode.verifyProofData(bytes);

            console.log(result);

        });
    });
});
